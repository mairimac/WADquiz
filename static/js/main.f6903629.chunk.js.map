{"version":3,"sources":["QuizDetails.js","QuizList.js","QuestionText.js","AnswerOptions.js","QuestionList.js","FeedbackScreen.js","App.js","serviceWorker.js","index.js"],"names":["QuizDetails","className","this","props","name","number","to","Component","QuizList","quizzes","map","quiz","Questions","questionText","max-width","height","src","AnswerOptions","data-toggle","data-target","class","width","viewBox","fill","xmlns","fill-rule","d","clip-rule","QuestionList","Object","keys","questions","question","FeedbackScreen","role","QuizDashboard","state","id","answers","image","hint","hintViewed","questionAttempted","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6903629.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n\nclass QuizDetails extends Component {\n\n\n  render () {\n    return (\n\n      <div className=\"card border-dark mb-2\">\n          <h5 className =\"text-center card-header card text-white bg-primary\">{this.props.name}</h5>\n              <div className =\"card-body text-center\">\n                  <p className =\"card-text\">Number of questions:<br/>{this.props.number}</p>\n                      <Link\n                      to='/quiz'\n                      className=\"btn btn-primary mb-3\">Start</Link>\n              </div>\n        </div>\n    );\n  }\n}\n\nexport default QuizDetails;\n","import React, { Component } from 'react';\nimport QuizDetails from './QuizDetails';\nimport QuizDashboard from './App'\n\nclass QuizList extends Component {\n\n  render () {\n\n    const quizzes = this.props.quizzes.map((quiz) => (\n      <QuizDetails\n      name={quiz.name}\n      number={quiz.number}/>\n    ))\n    return (\n      <div>\n        {quizzes}\n      </div>\n    );\n  }\n}\n\nexport default QuizList;\n","import React, { Component } from 'react';\n\n\n\n\n\nclass Questions extends Component {\n  render () {\n\n    return (\n      <div className=\"container\">\n       <div className=\"row\">\n          <div className=\"col-sm\">\n              <div className=\"card mb-2\">\n                  <div className =\"text-left card-header\">1. Read the question.</div>\n                   <div className=\"card-body text-justify\"> {this.props.questionText}\n                   </div>\n                      <div className=\"text-center\">\n                          <img className=\"mb-4 rounded img-fluid\" max-width=\"100%\"  height=\"auto\" src=\"http://i-want-to-study-engineering.org/figs/circle_intersection.png\"/>\n                      </div>\n                    </div>\n          </div>\n      </div>\n</div>\n    );\n  }\n}\n\nexport default Questions;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\nclass AnswerOptions extends Component {\n  render () {\n    return (\n      <div className=\"card mb-1 p-2\">\n          <div className =\"text-left card-header\">Choose the correct answer.</div>\n\n          <div className = \"card-body\">\n\n      <div className=\"btn btn-outline-dark btn-block p-2 mb-2\">Answer option 1</div>\n      <div className=\"btn btn-outline-dark btn-block p-2 mb-2\">Answer option 2</div>\n      <div className=\"btn btn-outline-dark btn-block p-2 mb-2\">Answer option 3</div>\n      <div className=\"btn btn-outline-dark btn-block p-2 mb-2\">Answer option 4</div>\n\n\n\n\n        <div className=\"btn btn-info btn-block p-2\" data-toggle=\"modal\" data-target=\"#hint\">Hint</div>\n               <Link to =\"/feedback\" className=\"btn btn-primary btn-block p-2\">Next question <svg class=\"bi bi-chevron-double-right\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path fill-rule=\"evenodd\" d=\"M3.646 1.646a.5.5 0 01.708 0l6 6a.5.5 0 010 .708l-6 6a.5.5 0 01-.708-.708L9.293 8 3.646 2.354a.5.5 0 010-.708z\" clip-rule=\"evenodd\"/>\n                  <path fill-rule=\"evenodd\" d=\"M7.646 1.646a.5.5 0 01.708 0l6 6a.5.5 0 010 .708l-6 6a.5.5 0 01-.708-.708L13.293 8 7.646 2.354a.5.5 0 010-.708z\" clip-rule=\"evenodd\"/>\n                </svg></Link>\n\n\n                </div>\n      </div>\n\n    )\n  }\n}\n\nexport default AnswerOptions;\n","import React, { Component } from 'react';\nimport Questions from './QuestionText';\nimport AnswerOptions from './AnswerOptions'\n\nclass QuestionList extends Component {\n\n  render() {\n\n\nconst questionKeys= Object.keys(this.props.questions);\n\n    const questions = this.props.questions.map((question) => (\n      <Questions\n      questionText={question.questionText}\n      />\n\n    ))\n      return (\n  <div className='container'>\n\n      {questions[0]}\n    )\n  })}\n        <div>\n\n        </div>\n        <div>\n        <AnswerOptions/>\n        </div>\n        </div>\n\n\n    );\n  }\n}\n\nexport default QuestionList;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\nclass FeedbackScreen extends Component {\n  render () {\n    return (\n      <div className=\"container\">\n\n        <div className=\"row \">\n          <div className=\"col\">\n            <h3 className=\"text-center display-4\">End of Quiz</h3>\n          </div>\n        </div>\n\n\n        <div className=\"row p-1\">\n          <div className=\"col-sm-6 col-md-4\">\n\n              <div className=\"alert alert-success\" role=\"alert\">\n                Question 1 <span className=\"badge badge-success badge-pill float-right\">Correct</span>\n              </div>\n            </div>\n\n            <div className=\"col-sm-6 col-md-4\">\n              <div className=\"alert alert-danger\" role=\"alert\">\n                Question 2 <span className=\"badge badge-danger badge-pill float-right\">Incorrect</span>\n              </div>\n            </div>\n\n\n            <div className=\"col-sm-6 col-md-4\">\n               <div className=\"alert alert-success\" role=\"alert\">\n                Question 3 <span className= \"badge badge-success badge-pill float-right\">Correct</span>\n              </div>\n            </div>\n\n\n          <div className=\"col-sm-6 col-md-4\">\n\n              <div className=\"alert alert-primary\" role=\"alert\">\n                Question 4 <span className=\"badge badge-primary badge-pill float-right\">Not\n                attempted</span>\n              </div>\n            </div>\n\n            <div className=\"col-sm-6 col-md-4\">\n              <div className=\"alert alert-success\" role=\"alert\">\n                Question 5 <span className=\n                \"badge badge-success badge-pill float-right\">Correct</span>\n              </div>\n            </div>\n\n            <div className=\"col-sm-6 col-md-4\">\n              <div className=\"alert alert-success\" role=\"alert\">\n                Question 6 <span className=\n                \"badge badge-success badge-pill float-right\">Correct</span>\n              </div>\n            </div>\n\n\n        </div>\n\n\n        <div className=\"row\">\n          <div className=\"col\">\n\n            <div className=\"card text-dark\">\n              <div className=\"card-body text-center\">\n                <h4 className=\"card-title\">Well done for completing the quiz.</h4>\n                <h5>You got 4/6 correct.</h5>\n\n                <Link to =\"/quiz\" className=\"btn btn-primary mt-2 mb-3\">Try Again?</Link><br/>\n                <Link to =\"/\" className=\"btn btn-primary mb-3\">Quizzes home</Link>\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n    </div>\n\n    )\n  }\n}\n\nexport default FeedbackScreen;\n","import React, { Component } from 'react';\nimport QuizList from './QuizList';\nimport QuestionList from './QuestionList';\nimport FeedbackScreen from './FeedbackScreen'\n\nimport { Route } from 'react-router-dom'\n\n\nclass QuizDashboard extends Component {\n  state = {\n    quizzes: [\n      {\n        name:'Think you know React?',\n        number:6\n    },\n    {\n      name: \"OpenCV is awesome\",\n      number:4\n    }\n    ],\n\n    questions: [\n\n  {\n\n     id: \"question_1\",\n     quiz: \"quiz_1\",\n     questionText: \"What would be the output from this code snippet\",\n     answers: [\n        { \"id\": 0, \"answerText\" : \"Hello Russell\", \"correct\": true },\n        { \"id\": 1, \"answerText\" : \"Russell\", \"correct\": false },\n        { \"id\": 2, \"answerText\" : \"Hello, world!\", \"correct\": false },\n        { \"id\": 3, \"answerText\" : \"Russell Hello\", \"correct\": false }\n     ],\n     image: \"q1.png\",\n     hint: \"React components implement a render() method that takes input data and returns what to display.  Input data that is passed into the component can be accessed by render() via this.props.\",\n     hintViewed: false,\n     questionAttempted: false\n  },\n   {\n     id: \"question_2\",\n     quiz: \"quiz_1\",\n     questionText: \"What does this code do?\",\n     answers: [\n        { \"id\": 0, \"answerText\" : \"Finds the time and prints it out.\", \"correct\": false },\n        { \"id\": 1, \"answerText\" : \"Prints out an incrementing timer (per second).\", \"correct\": true },\n        { \"id\": 2, \"answerText\" : \"Creates a countdown (per second).\", \"correct\": false }\n     ],\n     image: \"somePathOrURLToFile.jpg\",\n     hint: \"1000 milliseconds is one second.\",\n     hintViewed: false,\n     questionAttempted: false\n  },\n   {\n     id: \"question_3\",\n     quiz: \"quiz_1\",\n     questionText: \"Some question text ...\",\n     answers: [\n        { \"id\": 0, \"answerText\" : \"Some Answer Text ... \", \"correct\": false },\n        { \"id\": 1, \"answerText\" : \"Some Answer Text ... \", \"correct\": true },\n        { \"id\": 2, \"answerText\" : \"Some Answer Text ... \", \"correct\": false },\n        { \"id\": 3, \"answerText\" : \"Some Answer Text ... \", \"correct\": false }\n     ],\n     image: \"somePathOrURLToFile.jpg\",\n     hint: \"Some hint text ...\",\n     hintViewed: false,\n     questionAttempted: false\n  }\n\n]\n\n}\n\nrender() {\n  \n\n    return (\n    <div>\n\n        <Route exact path='/' render={() => (\n          <QuizList\n          quizzes={this.state.quizzes}\n          />\n        )} />\n          <Route path='/quiz' render={() => (\n          <QuestionList\n          questions={this.state.questions}\n\n\n          />\n        )} />\n          <Route path='/feedback' component={FeedbackScreen} />\n\n          </div>\n\n    );\n  }\n\n}\n\nexport default QuizDashboard;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}